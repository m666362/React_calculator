{"version":3,"sources":["Others/OvermindHelper.js","Components/CounterDemo.js","Components/MyButton.js","Components/ThemeSelector.js","serviceWorker.js","Others/Theme.js","index.js"],"names":["useOvermind","createHook","overmind","createOvermind","state","counter","actions","increase","number","useStyles","makeStyles","theme","root","margin","spacing","output","gridColumn","backgroundColor","display","alignItems","justifyContent","flexDirection","padding","wordWrap","wordBreak","paper","height","width","background","typography","numpad","label","CounterDemo","useState","result","setResult","currentValue","setValue","ans","setAns","qus","setQus","message","setMessage","classes","handleClick","event","value","target","console","log","tempAns","eval","parseFloat","toFixed","err","undefined","str","substr","length","handleKeyPress","key","className","xs","style","container","direction","justify","alignContent","variant","gutterBottom","item","map","index","onKeyPress","setDisplay","fontSize","grid","MyButton","props","type","onClick","withStyles","marginTop","input","borderRadius","position","palette","border","transition","transitions","create","fontFamily","join","borderColor","boxShadow","InputBase","Boolean","window","location","hostname","match","createMuiTheme","primary","main","secondary","error","red","A400","default","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9c69a9ee.chunk.js","sourcesContent":["// npm install overmind overmind-react\r\n// yarn add overmind overmind-react\r\n\r\nimport {createOvermind} from \"overmind\";\r\nimport {createHook} from \"overmind-react\";\r\n\r\nexport const useOvermind = createHook();\r\nexport const overmind = createOvermind({\r\n    state: {\r\n        counter: 0\r\n    },\r\n    actions: {\r\n        increase({state}, number) {\r\n            state.counter += number\r\n        },\r\n    }\r\n});\r\n","import React, {useState, useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport MyButton from './MyButton'\r\nimport ThemeSelector from \"./ThemeSelector\"\r\nimport {Paper, TextField} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        // backgroundColor: \"#FFE0B2\"\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    output: {\r\n        gridColumn: 1 / -1,\r\n        backgroundColor: \"#AAA\",\r\n        display: \"flex\",\r\n        alignItems: \"flex-end\",\r\n        justifyContent: \"space-around\",\r\n        flexDirection: \"column\",\r\n        padding: 10,\r\n        wordWrap: \"break-word\",\r\n        wordBreak: \"break-all\",\r\n    },\r\n    paper: {\r\n        height: 520,\r\n        width: 360,\r\n        background: '#FFE0B2',\r\n    },\r\n    typography: {\r\n        padding: 12,\r\n        height: 98,\r\n    },\r\n    numpad: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    }\r\n}));\r\n\r\nconst label = [\"AC\", \"*\", \"/\", \"C\", 7 , 8, 9, \"-\", 4, 5, 6, \"+\", 1, 2, 3, \"+\", 0, \"00\", \".\", \"=\" ]\r\n\r\nconst CounterDemo = () => {\r\n    const {state, actions} = useOvermind()\r\n    const [result, setResult] = useState(0);\r\n    const [currentValue, setValue] = useState(0);\r\n    const [ans, setAns] = useState('');\r\n    const [qus, setQus] = useState('');\r\n    const [message, setMessage] = useState(\"Initial\");\r\n    const classes = useStyles();\r\n    \r\n    const handleClick = (event)=>{\r\n\r\n        const value = event.target.value;\r\n        console.log(value)\r\n\r\n        switch (value) {\r\n            case '=': {\r\n\r\n                // if it's an equal sign, use the eval module\r\n                // to evaluate the question ,convert the answer\r\n                // (in number) to String\r\n                if (qus!=='')\r\n                {\r\n                    let tempAns='';\r\n                    try\r\n                    {\r\n                        tempAns = eval(qus);\r\n                        tempAns =  parseFloat(tempAns).toFixed(2)\r\n                        console.log(tempAns)\r\n                    }\r\n                    catch(err)\r\n                    {\r\n                        setAns(\"Math Error\")\r\n                    }\r\n                    if (tempAns===undefined)\r\n                        setAns(\"Math Error\")\r\n\r\n                    // update answer in our state.\r\n                    else {\r\n                        setAns(tempAns);\r\n                        setQus('');\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            case 'AC': {\r\n\r\n                // if it's the Clears sign, just clean our\r\n                // question and answer in the state\r\n                setAns('');\r\n                setQus('');\r\n                break;\r\n            }\r\n\r\n            case 'C': {\r\n                let str = qus;\r\n                str = str.substr(0,str.length-1);\r\n                setQus(str);\r\n                break;\r\n            }\r\n\r\n            default: {\r\n\r\n                // for every other command, update the answer in the state\r\n                setQus(qus+value);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleKeyPress(event) {\r\n        if(event.key === 'Enter'){\r\n            console.log('enter press here! ')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid className={classes.root} xs={12} style={{padding: 48}} container direction='column' justify='center' alignItems='center'\r\n              alignContent='center'>\r\n            <Paper className={classes.paper} container direction='column' justify='center' alignItems='center' >\r\n                <Typography className={classes.typography} variant=\"h5\" gutterBottom>{qus}</Typography>\r\n                <Typography className={classes.typography} variant=\"h2\" gutterBottom>{ans}</Typography>\r\n                <Grid className={classes.numpad} container item direction='row' alignItems='center' alignContent='center' justify='center'>\r\n                    {\r\n                        label.map((item, index)=>(\r\n                            <MyButton xs={12} item onKeyPress={handleKeyPress} setDisplay={handleClick} value={item} label={item}/>\r\n                        ))\r\n                    }\r\n\r\n                </Grid>\r\n            </Paper>\r\n\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default CounterDemo;\r\n","import React, {useState, useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useOvermind} from \"../Others/OvermindHelper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: 10,\r\n        height: 50,\r\n        width: 70,\r\n        fontSize: 25\r\n\r\n    },\r\n    grid: {\r\n        // backgroundColor: \"#AAA\",\r\n    }\r\n}));\r\n\r\nconst MyButton = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid className={classes.grid}>\r\n            <input\r\n                type=\"button\"\r\n                value={props.label}\r\n                onClick={props.setDisplay}\r\n                className={classes.root}\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MyButton;","import React from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst BootstrapInput = withStyles((theme) => ({\r\n    root: {\r\n        'label + &': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        borderRadius: 4,\r\n        position: 'relative',\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '1px solid #ced4da',\r\n        fontSize: 16,\r\n        padding: '10px 26px 10px 12px',\r\n        transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n        // Use the system font instead of the default Roboto font.\r\n        fontFamily: [\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            '\"Segoe UI\"',\r\n            'Roboto',\r\n            '\"Helvetica Neue\"',\r\n            'Arial',\r\n            'sans-serif',\r\n            '\"Apple Color Emoji\"',\r\n            '\"Segoe UI Emoji\"',\r\n            '\"Segoe UI Symbol\"',\r\n        ].join(','),\r\n        '&:focus': {\r\n            borderRadius: 4,\r\n            borderColor: '#80bdff',\r\n            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\r\n        },\r\n    },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\nconst ThemeSelector = () => {\r\n\r\n    const classes = useStyles();\r\n    const templates = [{name: \"some1\", color: \"#020202\"}, {name: \"some2\", color: \"#020202\"}, {name: \"some3\", color: \"#020202\"}, {name: \"some4\", color: \"#020202\"}, ]\r\n    const [template, setTemplate] = React.useState(templates[0].color);\r\n    const handleChange = (event) => {\r\n        setTemplate(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.margin}>\r\n                <InputLabel id=\"demo-customized-select-label\">Select Theme</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-customized-select-label\"\r\n                    id=\"demo-customized-select\"\r\n                    value={template}\r\n                    onChange={handleChange}\r\n                    input={<BootstrapInput />}\r\n                >\r\n                    {templates.map((template, index)=>(\r\n                        <MenuItem value={template.color}>{template.name}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ThemeSelector;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {createMuiTheme} from '@material-ui/core/styles';\r\nimport {red} from '@material-ui/core/colors';\r\n\r\n// Create a theme instance.\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"overmind-react\";\r\nimport {overmind} from './Others/OvermindHelper'\r\nimport CounterDemo from \"./Components/CounterDemo\";\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {theme} from './Others/Theme'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider value={overmind}>\r\n            <ThemeProvider theme={theme}>\r\n                <CounterDemo/>\r\n            </ThemeProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}